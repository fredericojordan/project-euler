#!/usr/bin/env elixir
defmodule Problem012 do
  @moduledoc """
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

  - 1: 1
  - 3: 1,3
  - 6: 1,2,3,6
  - 10: 1,2,5,10
  - 15: 1,3,5,15
  - 21: 1,3,7,21
  - 28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
  """

  defp factorize(x, n, prime_factors) when n > x, do: prime_factors
  defp factorize(x, n, prime_factors) when rem(x, n) == 0, do: factorize(div(x,n), n, [n | prime_factors])
  defp factorize(x, n, prime_factors), do: factorize(x, n+1, prime_factors)
  defp factorize(x) when is_integer(x) and x > 0, do: factorize(x, 2, [])

  defp triangle_numbers() do
    Stream.unfold([1, 0], fn [n, acc] -> {acc+n, [n+1, acc+n]} end)
  end

  defp count_occurences(list) do
    list
    |> Enum.reduce(%{}, fn x, acc -> Map.update(acc, x, 1, &(&1 + 1)) end)
  end

  defp count_divisors(n) do
    factorize(n)
    |> count_occurences()
    |> Map.values()
    |> Enum.map(&(&1+1))
    |> Enum.reduce(&Kernel.*/2)
  end

  def solve do
    triangle_numbers()
    |> Stream.drop_while(&(&1 <= 1))
    |> Stream.drop_while(&(count_divisors(&1) <= 500))
    |> Enum.take(1)
    |> List.first()
  end
end

IO.puts Problem012.solve
