#!/usr/bin/env elixir
defmodule Problem044 do
  @moduledoc """
  Pentagonal numbers are generated by the formula, P[n]=n(3n−1)/2. The first ten pentagonal numbers are:

      1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

  It can be seen that P[4] + P[7] = 22 + 70 = 92 = P[8]. However, their difference, 70 − 22 = 48, is not pentagonal.

  Find the pair of pentagonal numbers, P[j] and P[k], for which their sum and difference are pentagonal and D = |P[k] − P[j]| is minimised; what is the value of D?
  """

  defp pentagonal_numbers do
    Stream.unfold(1, fn x -> {trunc(x*(3*x-1)/2), x+1} end)
  end

  defp pentagonal_numbers(limit) do
    pentagonal_numbers()
    |> Stream.take_while(&(&1 <= limit))
  end

  defp integer?(num), do: num == trunc(num)

  defp pentagonal?(num) when num <= 0, do: false
  defp pentagonal?(num) do
    num
    |> Kernel.*(24)
    |> Kernel.+(1)
    |> :math.sqrt()
    |> Kernel.+(1)
    |> Kernel./(6)
    |> integer?()
  end

  defp generate_pentagonal_pairs(limit) do
    for x <- pentagonal_numbers(limit),
        y <- pentagonal_numbers(x),
        pentagonal?(x+y),
        pentagonal?(x-y),
        do:
          [x, y]
  end

  def solve do
    generate_pentagonal_pairs(10_000_000)
    |> Enum.map(fn list -> List.foldr(list, 0, &Kernel.-/2) end)
    |> Enum.min()
  end
end

IO.puts Problem044.solve
